import React, { useRef, useEffect, useState } from "react";
import { Header } from "../Header/Header";
import styles from "./HomePage.module.css";
import homePageImage from '../../assets/homePageImage.jpg';
import imageContent2 from '../../assets/imgContent3.jpg';
import imageContent1 from '../../assets/imgContent1.JPG';

const cards = [
  {
    heading: "Kh√≥a h·ªçc Ng√¥n ng·ªØ K√Ω hi·ªáu",
    subheading: "H·ªçc c√°ch giao ti·∫øp b·∫±ng k√Ω hi·ªáu",
    body: "Kh√≥a h·ªçc n√†y cung c·∫•p ki·∫øn th·ª©c c∆° b·∫£n v·ªÅ ng√¥n ng·ªØ k√Ω hi·ªáu, gi√∫p b·∫°n t·ª± tin giao ti·∫øp v·ªõi c·ªông ƒë·ªìng ng∆∞·ªùi khi·∫øm th√≠nh.",
    detail: "B·∫°n s·∫Ω h·ªçc c√°ch s·ª≠ d·ª•ng c√°c c·ª≠ ch·ªâ tay, n√©t m·∫∑t v√† c∆° th·ªÉ ƒë·ªÉ truy·ªÅn ƒë·∫°t th√¥ng ƒëi·ªáp m·ªôt c√°ch r√µ r√†ng v√† ch√≠nh x√°c. N·ªôi dung kh√≥a h·ªçc bao g·ªìm t·ª´ v·ª±ng k√Ω hi·ªáu ph·ªï bi·∫øn, c·∫•u tr√∫c ng·ªØ ph√°p c∆° b·∫£n, v√† c√°ch bi·ªÉu ƒë·∫°t c·∫£m x√∫c th√¥ng qua k√Ω hi·ªáu.",
    image: imageContent1
  },
  {
    heading: "Ph√°t tri·ªÉn k·ªπ nƒÉng Ng√¥n ng·ªØ K√Ω hi·ªáu",
    subheading: "N√¢ng cao kh·∫£ nƒÉng giao ti·∫øp b·∫±ng k√Ω hi·ªáu",
    body: "Ti·∫øp t·ª•c h√†nh tr√¨nh h·ªçc t·∫≠p v·ªõi c√°c b√†i h·ªçc n√¢ng cao, gi√∫p b·∫°n giao ti·∫øp linh ho·∫°t v√† hi·ªáu qu·∫£ h∆°n.",
    detail: "Kh√≥a h·ªçc n√†y s·∫Ω ƒëi s√¢u v√†o c√°c ch·ªß ƒë·ªÅ giao ti·∫øp h√†ng ng√†y, k√Ω hi·ªáu chuy√™n ng√†nh v√† k·ªπ nƒÉng phi√™n d·ªãch ng√¥n ng·ªØ k√Ω hi·ªáu. B·∫°n s·∫Ω ƒë∆∞·ª£c th·ª±c h√†nh v·ªõi c√°c t√¨nh hu·ªëng th·ª±c t·∫ø, c·∫£i thi·ªán t·ªëc ƒë·ªô v√† ƒë·ªô ch√≠nh x√°c khi s·ª≠ d·ª•ng ng√¥n ng·ªØ k√Ω hi·ªáu.",
    image: imageContent2
  }
];


const HomePage = () => {
  const cardRefs = useRef([]);
  const [visible, setVisible] = useState(Array(cards.length).fill(false));
  const [imgVisible, setImgVisible] = useState(false);
  const imgRef = useRef(null);
  const [overlayVisible, setOverlayVisible] = useState(false);
  const [servicesVisible, setServicesVisible] = useState(false);
  const [serviceItemsVisible, setServiceItemsVisible] = useState([false, false, false]);
  const servicesRef = useRef(null);
  const serviceItemRefs = [useRef(null), useRef(null), useRef(null)];

  useEffect(() => {
    // Fade-in effect for top image
    const observer = new window.IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setImgVisible(true);
          setTimeout(() => setOverlayVisible(true), 400); // Hi·ªán overlay sau khi ·∫£nh fade-in m·ªôt ch√∫t
          observer.disconnect();
        }
      },
      { threshold: 0.1 }
    );
    if (imgRef.current) observer.observe(imgRef.current);
    return () => observer.disconnect();
  }, []);

  useEffect(() => {
    const observers = [];
    cardRefs.current = cardRefs.current.slice(0, cards.length);
    cards.forEach((_, idx) => {
      observers[idx] = new window.IntersectionObserver(
        ([entry]) => {
          if (entry.isIntersecting) {
            setVisible(v => {
              const updated = [...v];
              updated[idx] = true;
              return updated;
            });
            observers[idx].disconnect();
          }
        },
        { threshold: 0.2 }
      );
      if (cardRefs.current[idx]) {
        observers[idx].observe(cardRefs.current[idx]);
      }
    });
    return () => observers.forEach(obs => obs.disconnect());
  }, []);

  useEffect(() => {
    // Observer cho section d·ªãch v·ª•
    const servicesObserver = new window.IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setServicesVisible(true);
          servicesObserver.disconnect();
        }
      },
      { threshold: 0.2 }
    );
    if (servicesRef.current) servicesObserver.observe(servicesRef.current);
    return () => servicesObserver.disconnect();
  }, []);

  useEffect(() => {
    if (servicesVisible) {
      // Hi·ªán l·∫ßn l∆∞·ª£t t·ª´ng th·∫ª d·ªãch v·ª• t·ª´ ph·∫£i sang tr√°i, t·ª´ng card m·ªôt
      let idx = 2;
      function showNextCard() {
        setServiceItemsVisible(prev => {
          const updated = [...prev];
          updated[idx] = true;
          return updated;
        });
        if (idx > 0) {
          setTimeout(() => {
            idx--;
            showNextCard();
          }, 600); // 600ms: th·ªùi gian animation + delay r√µ r·ªát
        }
      }
      showNextCard();
    }
  }, [servicesVisible]);

  return (
    <>
      <Header UserName="Khong Manh Tuan" />
      <div style={{position: 'relative'}}>
        <img
          src={homePageImage}
          alt="Home Banner"
          className={`${styles.topFullImage} ${imgVisible ? styles.fadeIn : styles.fadeOut}`}
          ref={imgRef}
        />
        <div className={styles.overlayOnImage}>
          <div className={`${styles.overlayText} ${overlayVisible ? styles.overlayFadeIn : ''}`}>
            H·ªçc ng√¥n ng·ªØ&nbsp;k√Ω hi·ªáu d·ªÖ d√†ng h∆°n 
          </div>
          <button className={`${styles.getStartedOnImage} ${overlayVisible ? styles.overlayFadeInBtn : ''}`}>B·∫Øt ƒë·∫ßu ngay</button>
        </div>
      </div>
      <div className={styles.homePageWrapper} >
        <div className={styles.cardsSection}>
          {cards.map((card, idx) => {
            const isReverse = idx % 2 === 1;
            const slideClass = visible[idx]
              ? isReverse
                ? styles.slideInLeft
                : styles.slideInRight
              : styles.cardHidden;
            return (
              <div
                className={`${styles.infoCard} ${isReverse ? styles.reverse : ''} ${slideClass}`}
                key={idx}
                ref={el => (cardRefs.current[idx] = el)}
              >
                {card.image ? (
                  <img src={card.image} alt="Card" className={styles.cardImagePlaceholder} style={{objectFit:'cover'}} />
                ) : (
                  <div className={styles.cardImagePlaceholder}></div>
                )}
                <div className={styles.cardContent}>
                  <h2>{card.heading}</h2>
                  <h4>{card.subheading}</h4>
                  <p>{card.body}</p>
                  <p style={{ color: '#888', fontSize: 14 }}>{card.detail}</p>
                </div>
              </div>
            );
          })}
        </div>
        {/* D·ªãch v·ª• section */}
        <div className={styles.servicesSection} ref={servicesRef}>
          <h2 className={styles.servicesTitle + (servicesVisible ? ' ' + styles.servicesTitleVisible : '')}>
            C√°c D·ªãch v·ª• ch√∫ng t√¥i ƒëem l·∫°i
          </h2>
          <div className={styles.servicesGrid}>
            {[0,1,2].map(idx => (
              <div
                key={idx}
                className={
                  styles.serviceItem +
                  (serviceItemsVisible[idx] ? ' ' + styles.serviceItemVisible : '')
                }
                ref={serviceItemRefs[idx]}
              >
                <div className={styles.serviceIcon}>
                  {idx === 0 ? '‚öôÔ∏è' : idx === 1 ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üè¢'}
                </div>
              <div className={styles.serviceName}>
              {idx === 0 ? 'C∆† B·∫¢N' : idx === 1 ? 'N√ÇNG CAO' : 'GIAO TI·∫æP'}
            </div>
            <div className={styles.serviceDesc}>
              {idx === 0
                ? 'Kh√≥a h·ªçc gi√∫p b·∫°n l√†m quen v·ªõi ng√¥n ng·ªØ k√Ω hi·ªáu, h·ªçc c√°ch di·ªÖn ƒë·∫°t √Ω t∆∞·ªüng c∆° b·∫£n v√† giao ti·∫øp v·ªõi ng∆∞·ªùi khi·∫øm th√≠nh.'
                : idx === 1
                ? 'ƒê√†o s√¢u h∆°n v√†o k·ªπ nƒÉng s·ª≠ d·ª•ng ng√¥n ng·ªØ k√Ω hi·ªáu, h·ªçc k√Ω hi·ªáu chuy√™n ng√†nh v√† c√°ch bi·ªÉu ƒë·∫°t c·∫£m x√∫c m·ªôt c√°ch linh ho·∫°t.'
                : 'Th·ª±c h√†nh giao ti·∫øp th·ª±c t·∫ø, gi√∫p b·∫°n t·ª± tin tr√≤ chuy·ªán b·∫±ng ng√¥n ng·ªØ k√Ω hi·ªáu v·ªõi c·ªông ƒë·ªìng v√† trong c√°c t√¨nh hu·ªëng h√†ng ng√†y.'}
            </div>

              </div>
            ))}
          </div>
        </div>
      </div>
    </>
  );
};

export default HomePage;